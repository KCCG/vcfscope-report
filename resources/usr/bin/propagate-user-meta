#!/usr/bin/env python

# A simple python script that makes use of the DNAnexus API
# to propagate any user-defined metadata (in the form of
# "tags" and "properties") from one file to another.

import sys
import os
import json
import dxpy
import dxpy.utils

#
# Helper function to get object ids from job_input.json (generated by the system)
# or job_output.json (generated by dx-upload-all-outputs / dx-jobutil-add-output)
#
def retrieve_objects(name, input_or_output):
    try:
        entry = json.loads(open(os.environ['HOME'] + "/job_" + input_or_output + ".json").read())[name]
    except:
        sys.stderr.write("ERROR: Could not locate the " + input_or_output + " '" + name + "'\n")
        raise

    if dxpy.is_dxlink(entry):
        return [entry]
    elif isinstance(entry, list):
        for e in entry:
            if not dxpy.is_dxlink(e):
                sys.stderr.write("ERROR: The " + input_or_output + " '" + name + "' is an array, but not an array of files\n")
                sys.exit(1)
        return entry
    else:
        sys.stderr.write("ERROR: The " + input_or_output + " '" + name + "' is not a file\n")
        sys.exit(1)

#
# Retrieve the object ids of the input and output
#

if len(sys.argv) != 3:
    sys.stderr.write("Usage: propagate-user-meta input_field output_field\n\n" \
                     "Example: propagate-user-meta reads sorted_bam\n" \
                     "   (propagates the tags and properties from the file given as\n" \
                     "    'reads' input, to the file produced as 'sorted_bam' output)\n");
    sys.exit(1)

source_name = sys.argv[1]
inputs = retrieve_objects(source_name, "input")

target_name = sys.argv[2]
outputs = retrieve_objects(target_name, "output")

#
# Propagate meta
#

sys.stdout.write("- Propagating metadata from '" + source_name + "' to '" + target_name + "'...\n")
for source_link in inputs:
    for target_link in outputs:

        source_id, source_project = dxpy.get_dxlink_ids(source_link)
        target_id, target_project = dxpy.get_dxlink_ids(target_link)

        source = dxpy.get_handler(source_link)
        target = dxpy.get_handler(target_link)

        source_info = source.describe(incl_properties=True)
        target_info = target.describe(incl_properties=True)

        #
        # Propagate tags
        #
        source_tags = set(source_info["tags"])
        target_tags = set(target_info["tags"])
        extra_tags = list(source_tags - target_tags)

        if len(extra_tags) != 0:
            sys.stdout.write("- Tags from " + source_id + " to " + target_id + ": " + ", ".join(sorted(extra_tags)) + "\n")
            target.add_tags(extra_tags)

        #
        # Propagate properties
        #
        source_properties = source_info["properties"]
        target_properties = target_info["properties"]

        updates = {}
        for (key, value) in source_properties.items():
            if key.startswith("."):
                continue
            if key in target_properties and target_properties[key] != "":
                if target_properties[key] != value:
                    updates[key] = target_properties[key]
                    target_set = set(target_properties[key].split(","))
                    for extra_key in value.split(","):
                        if extra_key not in target_set:
                            updates[key] += "," + extra_key
                    if updates[key] == target_properties[key]:
                        del updates[key]
            else:
                updates[key] = value

        if updates:
            sys.stdout.write("- Properties from " + source_id + " to " + target_id + ": " + ", ".join([k + "=" + v for (k,v) in updates.iteritems()]) + "\n")
            target.set_properties(updates)

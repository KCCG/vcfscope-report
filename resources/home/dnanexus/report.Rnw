%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  
%  KCCG WGS Performance Reporter -- Report generator
%  
%  Usage: 
%    Rscript --vanilla -e "library(knitr); knit('report.Rnw', output = 'report.tex')"
%  
%
%  Mark Pinese, 2015
%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[10pt,a4paper]{article}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{booktabs}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{url}

\usepackage{fancyhdr}
\setlength{\headheight}{15.2pt}
\pagestyle{fancyplain}
\usepackage{lastpage}

\begin{document}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PREPARATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% LIBRARIES AND HELPER FUNCTIONS
%--------------------------------------------------------------------
<<load-libs, cache=FALSE, echo=FALSE>>=
suppressMessages(library(GenomicRanges))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(xtable))

suppressMessages(source("report_functions.R"))
@


% LOAD PRECOMPUTED RESULTS
%--------------------------------------------------------------------
<<load-results, cache=FALSE, echo=FALSE>>=
env = Sys.getenv(names = TRUE)
rds_list_path = env["PARAM_INPUT_RDS_PATH"]
rds_list = scan(rds_list_path, character())

data = list()
for (path in rds_list)
{
    data[[path]] = readRDS(path)

    # Ensure that all the input files were generated using the same
    # settings.
    stopifnot(data[[path]]$params$criterion == data[[1]]$params$criterion)
    stopifnot(data[[path]]$params$criterion_latex == data[[1]]$params$criterion_latex)
    stopifnot(data[[path]]$params$region.subset == data[[1]]$params$region.subset)
    stopifnot(data[[path]]$params$region.subset.path == data[[1]]$params$region.subset.path)
    stopifnot(data[[path]]$params$path.gold.variants.orig == data[[1]]$params$path.gold.variants.orig)
    stopifnot(data[[path]]$params$path.gold.regions.orig == data[[1]]$params$path.gold.regions.orig)
    stopifnot(data[[path]]$params$genome == data[[1]]$params$genome)
    stopifnot(data[[path]]$params$path.genome == data[[1]]$params$path.genome)
    for (i in names(data[[1]]$params$version))
        stopifnot(data[[path]]$params$version[[i]] == data[[1]]$params$version[[i]])
}

universe = data[[1]]$universe
shared_params = data[[1]]$params[c("criterion", "criterion_latex", "region.subset", "region.subset.path", "path.gold.variants.orig", "path.gold.regions.orig", "genome", "path.genome", "version")]
shared_hashes = data[[1]]$hashes[c("region.subset.path", "path.gold.variants.orig", "path.gold.regions.orig", "path.genome")]
@


% KNITR SETUP
%--------------------------------------------------------------------
<<setup, cache=FALSE, echo=FALSE>>=
library(knitr)
options(
	tikzDocumentDeclaration = "\\documentclass[11pt]{article}",
	tikzLatexPackages = c(
		getOption("tikzLatexPackages"),
		"\\usepackage{amsmath}"),
	tikzMetricsDictionary="tikzMetrics"
)
opts_chunk$set(
	echo = FALSE, results = 'markup', message = FALSE, warning = FALSE, error = TRUE, 
	fig.align = 'center', cache = FALSE, cache.lazy = FALSE)
opts_knit$set(progress = TRUE, verbose = TRUE)
options(warn = 1)
@


% SUPPLIED REGION BED DETAILS
% --------------------------------------------------------------------
<<region-details, echo=FALSE, cache=FALSE>>=
temp.region_md5 = "NA"
temp.region_label = "NO"
if (shared_params$region.subset)
{
    temp.region_label = "YES"
    temp.region_md5 = data[[1]]$hashes$region.subset.path
}
@


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% REPORT STARTS HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}

\fancyhf{}
\lhead{WGS Performance Report (v\texttt{\Sexpr{shared_params$version$script}})}
\rhead{Page \thepage\ of \pageref{LastPage}}

\let\endtitlepage\relax
\begin{titlepage}
\begin{flushleft}
\LARGE{WGS Performance Report}
\HRule
\end{flushleft}
\end{titlepage}


\section{Summary}
Number of samples: \texttt{\Sexpr{length(data)}} \\
Analysis restricted to regions? \Sexpr{temp.region_label} \\
Report version: \texttt{\Sexpr{shared_params$version$script}} \\
Report time: \texttt{\Sexpr{date()}} \\
Call criterion: \Sexpr{shared_params$criterion_latex} \\


\section{Samples}
<<sample-table,results='asis'>>=
temp.sample_table = xtable(data.frame(
    "ID" = 1:length(data),
    "Name" = sapply(data, function(x) texquote(x$params$sample.id)),
    "VCF" = paste("\\texttt{", sapply(data, function(x) texquote(gsub(".*/", "", x$params$path.test.orig))), "}"),
    "MD5" = paste("\\texttt{", sapply(data, function(x) gsub("\\s+$", "", x$hashes$path.test.orig)), "}")),
    align = "lllll")
print(temp.sample_table, sanitize.text.function = function(x) x, include.rownames = FALSE)
@


\section{Region analysed}
<<subset-calcs>>=
temp.size_genome = sum(as.numeric(width(universe$genome)))      # | GENOME |
temp.size_subset = sum(as.numeric(width(universe$subset)))      # | BED ^ GENOME |
temp.size_gold = sum(as.numeric(width(universe$analysis)))      # | GIAB ^ BED ^ GENOME |
@


\begin{itemize}
Of the \Sexpr{formatC2(temp.size_genome, digits=0, format="f", big.mark=",")} bases in the genome, \Sexpr{formatC2(temp.size_subset, digits=0, format="f", big.mark=",")} (\Sexpr{round(temp.size_subset / temp.size_genome * 100, 2)}\%) were in the supplied report target regions.  Of the target bases, \Sexpr{formatC2(temp.size_gold, digits=0, format="f", big.mark=",")} (\Sexpr{round(temp.size_gold / temp.size_subset * 100, 2)}\%) had gold-standard genotype available, and were used in this report.
\end{itemize}

<<subset-plots,fig.height=4,fig.width=6.4,out.width='4in'>>=
plotGenomeBreakdown(f_targ_of_wg = temp.size_subset / temp.size_genome, f_gold_of_targ = temp.size_gold / temp.size_subset)
@


\section{Performance}
% <<performance-plots,fig.width=5,fig.height=5,out.width='2.5in',fig.show='hold'>>=
<<performance-plots,fig.width=5,fig.height=5,out.width='2.5in',fig.show='asis',echo=TRUE>>=

ggplot(calcPerformanceStats(data, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg)), aes(x = zyg, y = sens, fill = zyg)) + 
    geom_bar(stat = "identity", position = "dodge") + 
    geom_errorbar(aes(ymin = sens.lci, ymax = sens.uci), width = 0.2) + 
    labs(x = "", y = "Sensitivity", fill = "Zygosity", title = "SNV Detection") + 
    theme_bw() + ylim(0, 1)

ggplot(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg)), aes(x = zyg, y = n, fill = zyg)) + 
    geom_bar(stat = "identity", position = "dodge") + 
    labs(x = "", y = "Number of mutations", fill = "Zygosity", title = "SNV Counts in Gold Standard") + 
    theme_bw()


ggplot(calcPerformanceStats(data, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg, depth)), aes(x = depth, y = sens, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lci, ymax = sens.uci, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "SNV Detection vs Depth") + 
    theme_bw() + ylim(0, 1)

ggplot(
    marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg, depth)), 
    aes(x = depth, y = ntp + nfn, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Number of mutations", fill = "Zygosity", colour = "Zygosity", title = "SNV Counts in Gold Standard") + 
    theme_bw()


ggplot(calcPerformanceStats(data, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize)), aes(x = mutsize, y = sens, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lci, ymax = sens.uci, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases inserted (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Insertion Detection Performance") + 
    theme_bw() + ylim(0, 1)

# ggplot(calcPerformanceStats(data, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize, depth)), aes(x = depth, y = sens, group = zyg, colour = ) + 
#     geom_line() + 
#     geom_ribbon(aes(ymin = sens.lci, ymax = sens.uci, fill = zyg), alpha = 0.25, colour = NA) + 
#     geom_point(size = 2, shape = 21, fill = "white") + 
#     labs(x = "Number of bases inserted (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Insertion Detection Performance") + 
#     theme_bw() + ylim(0, 1) + facet_wrap(~ mutsize)

ggplot(
    marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize)), 
    aes(x = mutsize, y = ntp + nfn, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases inserted (inclusive)", y = "Number of mutations", fill = "Zygosity", colour = "Zygosity", title = "Insertion Counts in Gold Standard") + 
    theme_bw()


ggplot(calcPerformanceStats(data, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize)), aes(x = mutsize, y = sens, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lci, ymax = sens.uci, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases deleted (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Deletion Detection Performance") + 
    theme_bw() + ylim(0, 1)

# ggplot(calcPerformanceStats(data, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize, depth)), aes(x = depth, y = sens, group = zyg, colour = ) + 
#     geom_line() + 
#     geom_ribbon(aes(ymin = sens.lci, ymax = sens.uci, fill = zyg), alpha = 0.25, colour = NA) + 
#     geom_point(size = 2, shape = 21, fill = "white") + 
#     labs(x = "Sequence depth (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Deletion Detection Performance") + 
#     theme_bw() + ylim(0, 1) + facet_wrap(~ mutsize)

ggplot(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize)), aes(x = mutsize, y = ntp + nfn, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases deleted (inclusive)", y = "Number of mutations", fill = "Zygosity", colour = "Zygosity", title = "Deletion Counts in Gold Standard") + 
    theme_bw()



# Depth FPR: For each depth bin, divide nfp by n.  This is rough as n is the number of variants, not the number of bases,
# in a given depth window.  This approximation assumes that variants are evenly distributed, irrespective of depth -- 
# probably not the case.
temp_nfp = calcPerformanceStats(data, quote(TRUE), .(depth))
temp_nfp$approx_fpr = temp_nfp$nfp / (temp_nfp$ntp + temp_nfp$nfn) * sum(temp_nfp$ntp + temp_nfp$nfn) / sum(as.numeric(width(universe$analysis))) * 1e6

ggplot(temp_nfp, aes(x = depth, y = approx_fpr)) + 
    geom_bar(stat = "identity") + 
    labs(x = "Sequence depth (inclusive)", y = "False positives per Mb (approx.)", title = "False positive rate vs depth") + 
    theme_bw()

ggplot(temp_nfp, aes(x = depth, y = n)) + 
    geom_bar(stat = "identity") + 
    labs(x = "Sequence depth (inclusive)", y = "Variant count at this depth", title = "Variant count vs depth") + 
    theme_bw()

ggplot(temp_nfp, aes(x = depth, y = nfp)) + 
    geom_bar(stat = "identity") + 
    labs(x = "Sequence depth (inclusive)", y = "False positive count at this depth", title = "False positive count vs depth") + 
    theme_bw()



# false_positive_count = sum(subset(class_subsets.performance_thresholded, muttype == "None")$nfp)
# false_positive_count_subset_size = sum(as.numeric(width(universe$analysis)))
# false_positive_rate_per_Mb = false_positive_count / false_positive_count_subset_size * 1e6
# 
# ggplot(data.frame(rate_per_Mb = false_positive_rate_per_Mb), aes(x = 1, y = rate_per_Mb)) + 
#     geom_bar(stat = "identity") + 
#     labs(y = "False positive rate per Mb", title = "False Positive Rate") + 
#     theme_bw()
@



% DATA AND SOFTWARE VERSIONS
%--------------------------------------------------------------------
\section{Versions}
\begin{itemize}
\item Software: \begin{itemize}
	\item Performance script: \texttt{\Sexpr{texquote(shared_params$version$script)}}
	\item R: \texttt{\Sexpr{texquote(R.version$version.string)}} (\texttt{\Sexpr{texquote(R.version$platform)}})
	\item Genome: \texttt{\Sexpr{texquote(shared_params$genome)}} (\texttt{\Sexpr{packageVersion(shared_params$genome)}})
	\item Java: \texttt{\Sexpr{texquote(shared_params$version$java)}}
	\item RTG core: \texttt{\Sexpr{texquote(shared_params$version$rtg)}}
	\item Bedtools: \texttt{\Sexpr{texquote(shared_params$version$bedtools)}}
	\item Execution time: \Sexpr{date()}
\end{itemize}
\item Data: \begin{itemize}
	\item GiaB VCF: \texttt{\url{\Sexpr{shared_params$path.gold.variants.orig}}} (MD5 \texttt{\Sexpr{texquote(shared_hashes$path.gold.variants.orig)}})
	\item GiaB BED: \texttt{\url{\Sexpr{shared_params$path.gold.regions.orig}}} (MD5 \texttt{\Sexpr{texquote(shared_hashes$path.gold.regions.orig)}})
	\item Analysis restricted to regions? \Sexpr{temp.region_label} \begin{itemize}
		\item Analysis region BED: \texttt{\url{\Sexpr{shared_params$region.subset.path}}} (MD5 \texttt{\Sexpr{texquote(temp.region_md5)}})
	\end{itemize}
\end{itemize}

\end{document}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  
%  KCCG WGS Performance Reporter -- Report generator
%  
%  Usage: 
%    Rscript --vanilla -e "library(knitr); knit('report.Rnw', output = 'report.tex')"
%  
%
%  Mark Pinese, 2015
%  
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[10pt,a4paper]{article}
\usepackage{geometry}
\usepackage{amsmath}
\usepackage{booktabs}
\usepackage{longtable}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{url}

\usepackage{fancyhdr}
\setlength{\headheight}{15.2pt}
\pagestyle{fancyplain}
\usepackage{lastpage}

\begin{document}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PREPARATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% KNITR SETUP
%--------------------------------------------------------------------

<<setup, cache=FALSE, echo=FALSE>>=
library(knitr)
options(
    tikzDocumentDeclaration = "\\documentclass[11pt]{article}",
    tikzLatexPackages = c(
        getOption("tikzLatexPackages"),
        "\\usepackage{amsmath}"),
    tikzMetricsDictionary="tikzMetrics"
)
opts_chunk$set(
    results = 'markup', include = TRUE, echo = FALSE, message = FALSE, warning = FALSE, error = TRUE, 
    cache = FALSE, cache.lazy = FALSE,
    fig.align = 'center', fig.width = 5, fig.height = 5, out.width = '2.5in', fig.show = 'hold')
opts_knit$set(progress = TRUE, verbose = TRUE)
options(warn = 1)
@


% ERROR BAR GLOBAL SETTINGS
%--------------------------------------------------------------------

<<settings>>=
# CI_MODEL = "none"
# CI_MODEL = "betabin.ml"
CI_MODEL = "binomial.ml"
# CI_MODEL = "logit.bayes"
CI_LEVEL = 0.95
CI_HEADING = sprintf("$%d\\%%$ CI", as.integer(round(CI_LEVEL*100)))
@


% LIBRARIES AND HELPER FUNCTIONS
%--------------------------------------------------------------------

<<load-libs>>=
suppressMessages(library(GenomicRanges))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(reshape2))
suppressMessages(library(xtable))

source("report_functions.R")
@


% LOAD PRECOMPUTED RESULTS
%--------------------------------------------------------------------

<<load-results>>=
env = Sys.getenv(names = TRUE)
rds_list_path = env["PARAM_INPUT_RDS_PATH"]
rds_list = scan(rds_list_path, character())

data = list()
for (path in rds_list)
{
    data[[path]] = readRDS(path)

    # Ensure that all the input files were generated using the same
    # settings.
    stopifnot(data[[path]]$params$criterion == data[[1]]$params$criterion)
    stopifnot(data[[path]]$params$criterion_latex == data[[1]]$params$criterion_latex)
    stopifnot(data[[path]]$params$region.subset == data[[1]]$params$region.subset)
    stopifnot(data[[path]]$params$region.subset.path == data[[1]]$params$region.subset.path)
    stopifnot(data[[path]]$params$path.gold.variants.orig == data[[1]]$params$path.gold.variants.orig)
    stopifnot(data[[path]]$params$path.gold.regions.orig == data[[1]]$params$path.gold.regions.orig)
    stopifnot(data[[path]]$params$genome == data[[1]]$params$genome)
    stopifnot(data[[path]]$params$path.genome == data[[1]]$params$path.genome)
    for (i in names(data[[1]]$params$version))
        stopifnot(data[[path]]$params$version[[i]] == data[[1]]$params$version[[i]])
}

# data.labels = texquote(abbreviate(gsub(".*/", "", names(data))))
data.labels = paste("S", 1:length(names(data)), sep = "")
names(data.labels) = names(data)
for (i in seq_along(data))
    data[[i]]$label = data.labels[[i]]

universe = data[[1]]$universe
shared_params = data[[1]]$params[c("criterion", "criterion_latex", "region.subset", "region.subset.path", "path.gold.variants.orig", "path.gold.regions.orig", "genome", "path.genome", "version")]
shared_hashes = data[[1]]$hashes[c("region.subset.path", "path.gold.variants.orig", "path.gold.regions.orig", "path.genome")]

# Augment the data with alternative variant categories (eg binned size,
# aggregate confidence).  These will be used in some summary plots.
data = categoriseCallConfidence(data)
@


% CREATE A LIST TO SAVE RESULTS FOR THE OUTPUT SUMMARY RDS
% --------------------------------------------------------------------
<<create-save-object>>=
saved_results = list(data = data, tables = list(snv = list(), ins = list(), del = list(), fpr = list()), shared_params = shared_params, shared_hashes = shared_hashes, universe = universe)
@


% SUPPLIED REGION BED DETAILS
% --------------------------------------------------------------------

<<region-details>>=
temp.region_md5 = "NA"
temp.region_label = "NO"
if (shared_params$region.subset)
{
    temp.region_label = "YES"
    temp.region_md5 = data[[1]]$hashes$region.subset.path
}
@



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% REPORT STARTS HERE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}

\fancyhf{}
\lhead{WGS Performance Report (v\texttt{\Sexpr{shared_params$version$script}})}
\rhead{Page \thepage\ of \pageref{LastPage}}

\let\endtitlepage\relax
\begin{titlepage}
\begin{flushleft}
\LARGE{WGS Performance Report}
\HRule
\end{flushleft}
\end{titlepage}



% SUMMARY
% --------------------------------------------------------------------

\section{Summary}
Number of samples: \texttt{\Sexpr{length(data)}} \\
Analysis restricted to regions? \Sexpr{temp.region_label} \\
Report version: \texttt{\Sexpr{shared_params$version$script}} \\
Report time: \texttt{\Sexpr{date()}} \\
Call criterion: \Sexpr{shared_params$criterion_latex} \\



% SAMPLE INFORMATION
% --------------------------------------------------------------------

\section{Samples}
<<sample-table,results='asis'>>=
temp.sample_table = data.frame(
    "Label" = sapply(data, function(x) texquote(x$label)),
    "VCF ID" = sapply(data, function(x) texquote(x$params$sample.id)),
    "VCF File" = paste("\\texttt{", sapply(data, function(x) texquote(gsub(".*/", "", x$params$path.test.orig))), "}"))
colnames(temp.sample_table) = gsub("\\.", " ", colnames(temp.sample_table))
print(xtable(temp.sample_table, align = "llll"), sanitize.text.function = function(x) x, include.rownames = FALSE)
@



% TARGET REGION INFORMATION
% --------------------------------------------------------------------

\section{Region analysed}
<<subset-calcs>>=
temp.size_genome = sum(as.numeric(width(universe$genome)))      # | GENOME |
temp.size_subset = sum(as.numeric(width(universe$subset)))      # | BED ^ GENOME |
temp.size_gold = sum(as.numeric(width(universe$analysis)))      # | GIAB ^ BED ^ GENOME |
@


\begin{itemize}
Of the \Sexpr{formatC2(temp.size_genome, digits=0, format="f", big.mark=",")} bases in the genome, \Sexpr{formatC2(temp.size_subset, digits=0, format="f", big.mark=",")} (\Sexpr{round(temp.size_subset / temp.size_genome * 100, 2)}\%) were in the supplied report target regions.  Of these target bases, \Sexpr{formatC2(temp.size_gold, digits=0, format="f", big.mark=",")} (\Sexpr{round(temp.size_gold / temp.size_subset * 100, 2)}\%) had gold-standard genotype available, and were used to generate this report.
\end{itemize}

<<subset-plots,fig.height=4,fig.width=6.4,out.width='4in'>>=
plotGenomeBreakdown(f_targ_of_wg = temp.size_subset / temp.size_genome, f_gold_of_targ = temp.size_gold / temp.size_subset)
@



% VARIANT FREQUENCY OVER DEPTH PRECALCULATION
% --------------------------------------------------------------------

<<depth-variant-distr>>=
# Calculate the frequency of variants at each depth in each sample,
# for either all variants (variants_vs_depth), or substitutions only 
# (substs_vs_depth)
variants_vs_depth = sapply(data, function(x) dlply(x$class_subsets.performance_thresholded, .(depth), function(y) sum(y$ntp + y$nfn)))
names(dimnames(variants_vs_depth)) = c("depth", "sample")
variants_vs_depth = matrix(unlist(variants_vs_depth), ncol = length(data), dimnames = dimnames(variants_vs_depth))
colnames(variants_vs_depth) = data.labels[colnames(variants_vs_depth)]
variants_vs_depth.melted = melt(variants_vs_depth, value.name = "count")

substs_vs_depth = laply(data, function(x) daply(subset(x$class_subsets.performance_thresholded, muttype == "Subst" & zyg %in% c("RA", "AA")), .(depth, zyg), function(y) sum(y$ntp + y$nfn)))
names(dimnames(substs_vs_depth)) = c("sample", "depth", "zyg")
dimnames(substs_vs_depth)$sample = data.labels[names(data)]
substs_vs_depth = substs_vs_depth[,,c("RA", "AA")]
substs_vs_depth.melted = melt(substs_vs_depth, value.name = "count")

ins_vs_sizedepth = laply(data, function(x) daply(subset(x$class_subsets.performance_thresholded, muttype == "Ins" & zyg %in% c("RA", "AA")), .(depth, mutsize_binned, zyg), function(y) sum(y$ntp + y$nfn)))
names(dimnames(ins_vs_sizedepth)) = c("sample", "depth", "mutsize_binned", "zyg")
dimnames(ins_vs_sizedepth)$sample = data.labels[names(data)]
ins_vs_sizedepth = ins_vs_sizedepth[,,,c("RA", "AA")]
ins_vs_sizedepth.melted = melt(ins_vs_sizedepth, value.name = "count")

del_vs_sizedepth = laply(data, function(x) daply(subset(x$class_subsets.performance_thresholded, muttype == "Del" & zyg %in% c("RA", "AA")), .(depth, mutsize_binned, zyg), function(y) sum(y$ntp + y$nfn)))
names(dimnames(del_vs_sizedepth)) = c("sample", "depth", "mutsize_binned", "zyg")
dimnames(del_vs_sizedepth)$sample = data.labels[names(data)]
del_vs_sizedepth = del_vs_sizedepth[,,,c("RA", "AA")]
del_vs_sizedepth.melted = melt(del_vs_sizedepth, value.name = "count")
@




\section{Performance}
\subsection{Sensitivity}

\subsubsection{Summary confidence classes}

<<sensitivity-confclass-marginal-plots,fig.width=12,out.width='6in'>>=
# Because the bars and errorbars have different widths
# we need to specify how wide the objects we are dodging are
temp.dodge = position_dodge(width = 0.9)

ggplot(dropMuttypesOtherNone(relabelMuttype(relabelZyg(calcPerformanceStats(data, quote(zyg %in% c("RA", "AA")), .(muttype, confidence_class, zyg), model = CI_MODEL, conf_level = CI_LEVEL)))), 
    aes(x = confidence_class, y = sens.est, fill = zyg)) + 
    geom_bar(stat = "identity", position = temp.dodge) + 
    geom_errorbar(aes(ymin = sens.lcl, ymax = sens.ucl), width = 0.2, position = temp.dodge) + 
    labs(x = "", y = "Sensitivity", fill = "Zygosity", title = "Detection rate") + 
    facet_wrap(~ muttype) + 
    geom_hline(yintercept = c(0.8, 0.95, 0.99), linetype = "dashed", alpha = 0.5, lwd = 0.5) + 
    theme_bw() + theme(axis.text.x = element_text(angle = 30, hjust = 1))
@

<<sensitivity-confclass-marginal-summary-table,results='asis'>>=
saved_results$tables$combined$confclass.summary = generateSensitivitySummaryTable(data, quote(zyg %in% c("RA", "AA")), .(muttype, confidence_class, zyg), ci_method = CI_MODEL, ci_level = CI_LEVEL)
temp_counts_lists = llply(data, function(d) marginalizePerformance(d$class_subsets.performance_thresholded, quote(zyg %in% c("RA", "AA")), .(muttype, confidence_class, zyg)))
temp_counts = temp_counts_lists[[1]]
for (i in seq_along(temp_counts_lists[-1]))
{
    temp_counts$ntp = temp_counts$ntp + temp_counts_lists[[i + 1]]$ntp
    temp_counts$nfn = temp_counts$nfn + temp_counts_lists[[i + 1]]$nfn
}
temp_counts = temp_counts[,c("muttype", "confidence_class", "zyg", "ntp", "nfn")]
print(convertSensitivitySummaryTableToXTable(saved_results$tables$combined$confclass.summary, total_var_count = temp_counts, caption = "SNV sensitivity: summary", ci_heading = CI_HEADING), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@


\subsubsection{Single nucleotide variants}

% SENSITIVITY: SNVs
% --------------------------------------------------------------------

<<sensitivity-snv-marginal-plots>>=
ggplot(relabelZyg(calcPerformanceStats(data, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg), model = CI_MODEL, conf_level = CI_LEVEL)), 
    aes(x = zyg, y = sens.est, fill = zyg)) + 
    geom_bar(stat = "identity", position = "dodge") + 
    geom_errorbar(aes(ymin = sens.lcl, ymax = sens.ucl), width = 0.2) + 
    labs(x = "", y = "Sensitivity", fill = "Zygosity", title = "SNV Detection") + 
    theme_bw() + coord_cartesian(ylim = c(0.9, 1.005))

ggplot(relabelZyg(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg))),
    aes(x = zyg, y = n, fill = zyg)) + 
    geom_bar(stat = "identity", position = "dodge") + 
    labs(x = "", y = "Number of variants", fill = "Zygosity", title = "SNV Counts in Gold Standard") + 
    theme_bw() + 
    scale_x_discrete(labels = c("RA" = "Het", "AA" = "HomAlt"))
@

<<sensitivity-snv-marginal-summary-table,results='asis'>>=
saved_results$tables$snv$zyg.summary = generateSensitivitySummaryTable(data, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg), ci_method = CI_MODEL, ci_level = CI_LEVEL)
temp_counts = dropSizeZero(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg)))
print(convertSensitivitySummaryTableToXTable(saved_results$tables$snv$zyg.summary, total_var_count = temp_counts, caption = "SNV sensitivity: summary", ci_heading = CI_HEADING), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@

<<sensitivity-snv-marginal-persample-table,results='asis'>>=
saved_results$tables$snv$zyg.sample = generateSensitivityCountTable(data, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg))
print(convertSensitivityCountTableToXTable(saved_results$tables$snv$zyg.sample, caption = "SNV sensitivity: per sample"), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@



<<sensitivity-snv-bydepth-plots>>=
ggplot(dropDepthUnknown(relabelZyg(calcPerformanceStats(data, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg, depth), model = CI_MODEL, conf_level = CI_LEVEL))),
    aes(x = depth, y = sens.est, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lcl, ymax = sens.ucl, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "SNV Detection vs Depth") + 
    theme_bw() + ylim(0, 1) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))


ggplot(dropDepthUnknown(relabelZyg(substs_vs_depth.melted)), 
    aes(x = depth, y = count, lty = sample, shape = sample, colour = zyg, group = sample:zyg)) + 
    geom_line() + geom_point(size = 2, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Variants with this depth", title = "SNV Counts vs Depth", colour = "Zygosity", shape = "Sample Label", lty = "Sample Label") + 
    theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
@


<<sensitivity-snv-bydepth-summary-table,results='asis'>>=
saved_results$tables$snv$zyg.depth.summary = generateSensitivitySummaryTable(data, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg, depth), ci_method = CI_MODEL, ci_level = CI_LEVEL)
print(convertSensitivitySummaryTableToXTable(saved_results$tables$snv$zyg.depth.summary, total_var_count = NULL, caption = "SNV sensitivity by depth: summary", ci_heading = CI_HEADING), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@

<<sensitivity-snv-bydepth-persample-table,results='asis'>>=
saved_results$tables$snv$zyg.depth.sample = generateSensitivityCountTable(data, quote(muttype == "Subst" & zyg %in% c("RA", "AA")), .(zyg, depth))
print(convertSensitivityCountTableToXTable(saved_results$tables$snv$zyg.depth.sample, caption = "SNV sensitivity by depth: per sample"), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@



% SENSITIVITY: INSERTIONS
% --------------------------------------------------------------------

\subsubsection{Insertions}
<<sensitivity-ins-bysize-plots>>=
ggplot(dropSizeZero(relabelZyg(calcPerformanceStats(data, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize), model = CI_MODEL, conf_level = CI_LEVEL))), 
    aes(x = mutsize, y = sens.est, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lcl, ymax = sens.ucl, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases inserted (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Insertion Detection Performance") + 
    theme_bw() + ylim(0, 1) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))

ggplot(
    dropSizeZero(relabelZyg(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize)))),
    aes(x = mutsize, y = ntp + nfn, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases inserted (inclusive)", y = "Number of variants", fill = "Zygosity", colour = "Zygosity", title = "Insertion Counts in Gold Standard") + 
    theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))

@


<<sensitivity-ins-bysize-summary-table,results='asis'>>=
saved_results$tables$ins$zyg.mutsize.summary = generateSensitivitySummaryTable(data, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize), ci_method = CI_MODEL, ci_level = CI_LEVEL)
temp_counts = dropSizeZero(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize)))
print(convertSensitivitySummaryTableToXTable(saved_results$tables$ins$zyg.mutsize.summary, total_var_count = temp_counts, caption = "Insertion sensitivity by size: summary", ci_heading = CI_HEADING), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@

<<sensitivity-ins-bysize-persample-table,results='asis'>>=
saved_results$tables$ins$zyg.mutsize.sample = generateSensitivityCountTable(data, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize))
print(convertSensitivityCountTableToXTable(saved_results$tables$ins$zyg.mutsize.sample, caption = "Insertion sensitivity by size: per sample"), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@


<<sensitivity-ins-bysizedepth-plots,fig.width=8,out.width='4in'>>=
ggplot(dropSizeZero(relabelZyg(calcPerformanceStats(data, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize_binned, depth), model = CI_MODEL, conf_level = CI_LEVEL))), 
    aes(x = depth, y = sens.est, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lcl, ymax = sens.ucl, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Insertion Detection Performance vs Size, Depth") + 
    theme_bw() + ylim(0, 1) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + facet_wrap(~ mutsize_binned)

ggplot(dropSizeZero(dropDepthUnknown(relabelZyg(ins_vs_sizedepth.melted))), 
    aes(x = depth, y = count, lty = sample, shape = sample, colour = zyg, group = sample:zyg)) + 
    geom_line() + geom_point(size = 2, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Variants with this depth", title = "Insertion Counts vs Size, Depth", colour = "Zygosity", shape = "Sample Label", lty = "Sample Label") + 
    theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + facet_wrap(~ mutsize_binned)
@


<<sensitivity-ins-bysizedepth-summary-table,results='asis'>>=
saved_results$tables$ins$zyg.mutsizedepth.summary = generateSensitivitySummaryTable(data, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize_binned, depth), ci_method = CI_MODEL, ci_level = CI_LEVEL)
temp_counts = dropDepthUnknown(dropSizeZero(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize_binned, depth))))
print(convertSensitivitySummaryTableToXTable(saved_results$tables$ins$zyg.mutsizedepth.summary, total_var_count = temp_counts, caption = "Insertion sensitivity by size, depth: summary", ci_heading = CI_HEADING), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@

<<sensitivity-ins-bysizedepth-persample-table,results='asis'>>=
saved_results$tables$ins$zyg.mutsizedepth.sample = generateSensitivityCountTable(data, quote(muttype == "Ins" & zyg %in% c("RA", "AA")), .(zyg, mutsize_binned, depth))
print(convertSensitivityCountTableToXTable(saved_results$tables$ins$zyg.mutsizedepth.sample, caption = "Insertion sensitivity by size, depth: per sample"), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@



% SENSITIVITY: DELETIONS
% --------------------------------------------------------------------

\subsubsection{Deletions}
<<sensitivity-del-bysize-plots>>=
ggplot(dropSizeZero(relabelZyg(calcPerformanceStats(data, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize), model = CI_MODEL, conf_level = CI_LEVEL))), 
    aes(x = mutsize, y = sens.est, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lcl, ymax = sens.ucl, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases deleted (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Deletion Detection Performance") + 
    theme_bw() + ylim(0, 1) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))

ggplot(dropSizeZero(relabelZyg(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize)))), 
    aes(x = mutsize, y = ntp + nfn, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Number of bases deleted (inclusive)", y = "Number of variants", fill = "Zygosity", colour = "Zygosity", title = "Deletion Counts in Gold Standard") + 
    theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
@


<<sensitivity-del-bysize-summary-table,results='asis'>>=
saved_results$tables$del$zyg.mutsize.summary = generateSensitivitySummaryTable(data, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize), ci_method = CI_MODEL, ci_level = CI_LEVEL)
temp_counts = dropSizeZero(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize)))
print(convertSensitivitySummaryTableToXTable(saved_results$tables$del$zyg.mutsize.summary, total_var_count = temp_counts, caption = "Deletion sensitivity by size: summary", ci_heading = CI_HEADING), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@

<<sensitivity-del-bysize-persample-table,results='asis'>>=
saved_results$tables$del$zyg.mutsize.sample = generateSensitivityCountTable(data, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize))
print(convertSensitivityCountTableToXTable(saved_results$tables$del$zyg.mutsize.sample, caption = "Deletion sensitivity by size: per sample"), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@


<<sensitivity-del-bysizedepth-plots,fig.width=8,out.width='4in'>>=
ggplot(dropSizeZero(relabelZyg(calcPerformanceStats(data, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize_binned, depth), model = CI_MODEL, conf_level = CI_LEVEL))), 
    aes(x = depth, y = sens.est, group = zyg, colour = zyg)) + 
    geom_line() + 
    geom_ribbon(aes(ymin = sens.lcl, ymax = sens.ucl, fill = zyg), alpha = 0.25, colour = NA) + 
    geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Sensitivity", fill = "Zygosity", colour = "Zygosity", title = "Deletion Detection Performance vs Size, Depth") + 
    theme_bw() + ylim(0, 1) + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + facet_wrap(~ mutsize_binned)

ggplot(dropSizeZero(dropDepthUnknown(relabelZyg(ins_vs_sizedepth.melted))), 
    aes(x = depth, y = count, lty = sample, shape = sample, colour = zyg, group = sample:zyg)) + 
    geom_line() + geom_point(size = 2, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Variants with this depth", title = "Deletion Counts vs Size, Depth", colour = "Zygosity", shape = "Sample Label", lty = "Sample Label") + 
    theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + facet_wrap(~ mutsize_binned)
@


<<sensitivity-del-bysizedepth-summary-table,results='asis'>>=
saved_results$tables$del$zyg.mutsizedepth.summary = generateSensitivitySummaryTable(data, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize_binned, depth), ci_method = CI_MODEL, ci_level = CI_LEVEL)
temp_counts = dropDepthUnknown(dropSizeZero(marginalizePerformance(data[[1]]$class_subsets.performance_thresholded, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize_binned, depth))))
print(convertSensitivitySummaryTableToXTable(saved_results$tables$del$zyg.mutsizedepth.summary, total_var_count = temp_counts, caption = "Deletion sensitivity by size, depth: summary", ci_heading = CI_HEADING), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@

<<sensitivity-del-bysizedepth-persample-table,results='asis'>>=
saved_results$tables$del$zyg.mutsizedepth.sample = generateSensitivityCountTable(data, quote(muttype == "Del" & zyg %in% c("RA", "AA")), .(zyg, mutsize_binned, depth))
print(convertSensitivityCountTableToXTable(saved_results$tables$ins$zyg.mutsizedepth.sample, caption = "Deletion sensitivity by size, depth: per sample"), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@



% FALSE POSITIVE RATE
% --------------------------------------------------------------------

\subsection{False positive rate}
<<falsepositive-calcs>>=
# FPR here is defined as number of FP calls per megabase of sequence within
# the subset under consideration.  Unfortunately, this denominator (the
# megabases of sequence in the subset) is not exactly known, as it cannot
# be calculated from the VCF, instead requiring very slow subset counting
# over the BAM depth data.  

# For now, get around this limitation by approximating the denominator.  
# Do this by assuming that variants are evenly spread throughout the 
# genome, irrespective of the value of subsetting covariates.  Then, the 
# expected fraction of variants in a subset (relative to all variants) is 
# proportional to the number of bases in the subset (relative to the 
# number of bases in all subsets).

# This is only an approximation for determining the FPR *within a subset*.
# For the total FPR over the whole genome (all subsets combined), which
# is the sum of all per-subset FPRs weighted by the relative subset
# sizes, the approximated term falls out and the result is exact.

# For example, in a given subset i,
#   NFPi/Ni = VFPRi  # False positive rate (relative to vars)
#   NFPi/Si = BFPRi  # False positive rate (relative to bases)
# VFPRi (the rate of false positives in all variants) is what we can 
# calculate, but we want BFPRi (the rate of false positives in all bases).
# We don't know Si, but approximate it by:
#   Si ~= Ni / N * S
# Where Ni is the number of variants in the subset, N is the total count
# of variants in all subsets, and S is the total number of bases in all
# subsets.  Then,
#   BFPRi ~= (NFPi/Ni) * (N/S)
# To determine the portion of the total false positive rate contributed
# by region i, BFPRi is weighted by Si/S:
#   TFPRi = BFPRi * Si/S
# And the total FPR is the sum of these TFPRis:
#   TFPR = sum(TFPRi)
# Substituting the approximation above:
#   TFPRi = (NFPi/Ni) * (N/S) * Ni / N * S / S
#         = NFPi/S
# Which contains no approximated terms -- the result is exact, and
# makes intuitive sense.

# We put the above in the framework of confidence interval estimation
# by calculating CIs on the NFPi/Ni ratio.  The scaling factors are
# not based on random variables, so don't affect the CI beyond linear
# scaling.

# Calculate VFPRi (this is fpr.vs_depth$fpr.est)
fpr.vs_depth = calcPerformanceStats(data, quote(TRUE), .(depth), model = CI_MODEL, conf_level = CI_LEVEL)

# Calculate:
#   S     total analysis bases
#   NFPi  number of false positive variants in each depth class, grouped by sample
#   Ni    number of true variants in each depth class, grouped by sample
#   N     number of true variants overall (should be the same in all samples)
fpr.S = sum(as.numeric(width(universe$analysis)))

fpr.NFPi = sapply(data, function(x) dlply(x$class_subsets.performance_thresholded, .(depth), function(y) sum(y$nfp)))
names(dimnames(fpr.NFPi)) = c("depth", "sample")
fpr.NFPi = matrix(unlist(fpr.NFPi), ncol = length(data), dimnames = dimnames(fpr.NFPi))
colnames(fpr.NFPi) = data.labels[colnames(fpr.NFPi)]

# Ni has already been calculated, as variants_vs_depth

fpr.N = colSums(variants_vs_depth)
stopifnot(length(unique(fpr.N)) == 1)
fpr.N = fpr.N[[1]]


# Use VFPRi estimates and bounds, and the scaling factors above, to
# estimate BFPRi and bounds.
# The 1e6 factor is to express the FPR in false positives per megabase
fpr.vs_depth$bfpr.est = fpr.vs_depth$fpr.est * fpr.N/fpr.S * 1e6
fpr.vs_depth$bfpr.lcl = fpr.vs_depth$fpr.lcl * fpr.N/fpr.S * 1e6
fpr.vs_depth$bfpr.ucl = fpr.vs_depth$fpr.ucl * fpr.N/fpr.S * 1e6


temp.aggregate_fpr = mean(colSums(fpr.NFPi))/temp.size_gold*1e6
temp.aggregate_fpr_range = range(colSums(fpr.NFPi))/temp.size_gold*1e6
@


<<falsepositive-plots,fig.width=7>>=
# Plot BFPRi ~ depth.  This is averaged over the replicate samples.
ggplot(dropDepthUnknown(fpr.vs_depth), aes(x = depth, y = bfpr.est, ymin = bfpr.lcl, ymax = bfpr.ucl)) + 
    geom_bar(stat = "identity") + 
    geom_errorbar(width = 0.2) + 
    labs(x = "Sequence depth (inclusive)", y = "False positives per Mb (approx.)", title = "False Positive Rate: Effect of Depth") + 
    theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))

# Now create an accessory plot showing the number of variants in each
# depth class.  This varies per sample, so work from the variants_vs_depth structure.
ggplot(dropDepthUnknown(variants_vs_depth.melted), aes(x = depth, y = count, group = sample, colour = sample)) + 
    geom_line() + geom_point(size = 2, shape = 21, fill = "white") + 
    labs(x = "Sequence depth (inclusive)", y = "Variant positions with this depth", title = "Variant Count vs Depth", colour = "Sample Label") + 
    theme_bw() + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
@


% Averaged across all samples and depths, the aggregate false positive rate was \Sexpr{formatC(temp.aggregate_fpr, format = "f", digits = 2)} (range $\Sexpr{formatC(temp.aggregate_fpr_range[1], format = "f", digits = 2)}-\Sexpr{formatC(temp.aggregate_fpr_range[2], format = "f", digits = 2)}$) false positive calls per megabase.


<<falsepositive-table,results='asis'>>=
temp = fpr.vs_depth
temp = temp[temp$depth != "Unknown",c("depth", "bfpr.est", "bfpr.lcl", "bfpr.ucl")]
temp[,3] = sprintf("$%.2f-%.2f$", temp[,3], temp[,4])
temp = temp[,-4]
colnames(temp) = c("Depth", "FPR estimate", sprintf("$%d\\%%$ CI", as.integer(round(CI_LEVEL*100))))
saved_results$tables$fpr = temp

print(xtable(temp, caption = "Approximate false positive rate (false positives per megabase)"), sanitize.text.function = function(x) x, include.rownames = FALSE, hline.after = c(-1, 0), tabular.environment = "longtable", caption.placement = "top")
@


% DATA AND SOFTWARE VERSIONS
%--------------------------------------------------------------------

\section{Versions}
\begin{itemize}
\item Software: \begin{itemize}
	\item Performance script: \texttt{\Sexpr{texquote(shared_params$version$script)}}
	\item R: \texttt{\Sexpr{texquote(R.version$version.string)}} (\texttt{\Sexpr{texquote(R.version$platform)}})
	\item Genome: \texttt{\Sexpr{texquote(shared_params$genome)}} (\texttt{\Sexpr{shared_params$version$genome}})
	\item Java: \texttt{\Sexpr{texquote(shared_params$version$java)}}
	\item RTG core: \texttt{\Sexpr{texquote(shared_params$version$rtg)}}
	\item Bedtools: \texttt{\Sexpr{texquote(shared_params$version$bedtools)}}
	\item Execution time: \Sexpr{date()}
\end{itemize}
\item Data: \begin{itemize}
	\item GiaB VCF: \texttt{\url{\Sexpr{shared_params$path.gold.variants.orig}}} (MD5 \texttt{\Sexpr{texquote(shared_hashes$path.gold.variants.orig)}})
	\item GiaB BED: \texttt{\url{\Sexpr{shared_params$path.gold.regions.orig}}} (MD5 \texttt{\Sexpr{texquote(shared_hashes$path.gold.regions.orig)}})
	\item Analysis restricted to regions? \Sexpr{temp.region_label} \begin{itemize}
		\item Analysis region BED: \texttt{\url{\Sexpr{shared_params$region.subset.path}}} (MD5 \texttt{\Sexpr{texquote(temp.region_md5)}})
	\end{itemize}
\item Statistics: \begin{itemize}
    \item Error bar method: \texttt{\Sexpr{texquote(CI_MODEL)}}
    \item Error bar level: \texttt{\Sexpr{CI_LEVEL}}
    \end{itemize}
\end{itemize}


\section{VCF file MD5 hashes}
<<data-hashes,results='asis'>>=
hash_strings = sprintf("\\item[\\texttt{%s}] \\texttt{%s}", 
    sapply(data, function(x) texquote(gsub(".*/", "", x$params$path.test.orig))), 
    sapply(data, function(x) gsub("\\s+$", "", x$hashes$path.test.orig)))
cat(sprintf("\\begin{description}\n%s\n\\end{description}", paste(hash_strings, sep = "", concatenate = "")))
@



% SAVE REPORT DATA
%--------------------------------------------------------------------
<<save>>=
saveRDS(saved_results, file = "report.rds")
@

\end{document}

#!/bin/bash
set -e -u -o pipefail
set +x
IFS=$'\n\t'

function message {
  echo >&2 "$(date -u)" "$1"
}


#####################################################################
# VERSION
#####################################################################
export CONST_VERSION_SCRIPT="2.0.0"


#####################################################################
# SOFTWARE AND DATA LOCATIONS
#####################################################################

# dnanexus jobs run as root; assume that if the user is root, we're
# on dx.
export IS_DNANEXUS=0
if [ `whoami` == root ]; then
  IS_DNANEXUS=1
fi

# Software & Resources
if [ ${IS_DNANEXUS} -eq 1 ]; then
  PATH_SCRATCH_DEFAULT="/tmp"

  RSCRIPT="/home/dnanexus/bin/Rscript"
  R="/home/dnanexus/bin/R"
else
  # Wolfpack settings (marpin only for now)
  PATH_SCRATCH_DEFAULT="/directflow/ClinicalGenomicsPipeline/tmp"

  RSCRIPT="/home/marpin/bin/Rscript"
  R="/home/marpin/bin/R"
fi


# Script location
PARAM_SCRIPT_PATH=$(readlink -f $(dirname $0))
PARAM_EXEC_PATH=$(pwd)

# Scratch space
mkdir -p ${PATH_SCRATCH_DEFAULT}
export PARAM_SCRATCH=$(mktemp -d --tmpdir=${PATH_SCRATCH_DEFAULT} perfrept.XXXXXXXXXX)


#####################################################################
# COMMAND LINE PARSING
#####################################################################
print_usage() {
cat << EOF
Usage: ${0##*/} <RDSLIST> <PDFOUT>

Create a WGS performance report.

    RDSLIST   File containing paths to input RDS files, one per line.
              RDS files are as generated by performance_measure.sh
    PDFOUT    Path to the output report PDF.
    -h        Display this help and exit.

Version ${CONST_VERSION_SCRIPT}

Mark Pinese
EOF
}

if [ $# -ne 2 ]; then
	print_usage >&2
	exit 1
fi


export PARAM_INPUT_RDS_PATH=$(readlink -f $1)
PARAM_OUTPUT_PDF_PATH=$(readlink -f $2)


#####################################################################
# PARAMETER CHECKING
#####################################################################

if [ ! -e ${PARAM_INPUT_RDS_PATH} ]; then
	message "Error: Input file ${PARAM_INPUT_RDS_PATH} not found."
	exit 3
fi

if [ -e ${PARAM_OUTPUT_PDF_PATH} ]; then
	message "Error: Output file ${PARAM_OUTPUT_PDF_PATH} already exists."
	exit 4
fi


#####################################################################
# SOFTWARE CHECKING
#####################################################################
if [ ! -e ${RSCRIPT} ]; then
  message "Error: Rscript executable not found at ${RSCRIPT}."
  exit 6
fi

if [ ! -f ${PARAM_SCRIPT_PATH}/report.Rnw ]; then
  message "Error: Missing at least one required R source file."
  exit 9
fi


# #####################################################################
# # REPORT GENERATION
# #####################################################################
message "Generating report..."

cp ${PARAM_SCRIPT_PATH}/report.Rnw ${PARAM_SCRATCH}
cp ${PARAM_SCRIPT_PATH}/report_functions.R ${PARAM_SCRATCH}
cd ${PARAM_SCRATCH}

${RSCRIPT} --vanilla -e "library(knitr); knit('report.Rnw', output = 'report.tex')"

# Remove the report.pdf that may be present in the scratch directory,
# so we can later check whether pdflatex successfully built a report
# or not.
rm -f ${PARAM_SCRATCH}/report.pdf

# Run pdflatex
# Latex often 'fails' (returns a nonzero exit status), but still 
# generates a report.  Keep going when this happens, and test for
# failure explicitly later.
pdflatex -interaction nonstopmode report.tex || true
pdflatex -interaction nonstopmode report.tex || true

# Check whether the report.pdf was generated
if [ ! -e ${PARAM_SCRATCH}/report.pdf ]; then
	message "  Error: pdflatex did not successfully generate report.pdf."
	message "  Check ${PARAM_SCRATCH}/report.tex and the latex log for errors."
	exit 12
fi

cp ${PARAM_SCRATCH}/report.pdf ${PARAM_OUTPUT_PDF_PATH}
